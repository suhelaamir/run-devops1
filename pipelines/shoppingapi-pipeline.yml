# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

# trigger:
# - main
trigger:
    branches:
      include:
      - main
    paths:
      include:
      - Shopping/Shopping.API/*
      - aks/shoppingapi.yaml

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '11f80c7c-29a0-4815-847d-a42a9a697ee5'
  imageRepository: 'shoppingapi'
  containerRegistry: 'shoppinsgacr.azurecr.io'
  dockerfilePath: 'Shopping/Shopping.API/Dockerfile'
  #'**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'shoppinsgacrd9d3-auth'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'


stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        buildContext: $(Build.SourcesDirectory)/Shopping
        tags: |
          $(tag)

    # - upload: manifests
    #   artifact: manifests
    # - upload: aks
    #   artifact: aks
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.SourcesDirectory)/aks'
        artifact: 'aks'


- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'suhelaamirrundevops1-3370.default'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - script: |
                echo "Pipeline workspace: $(Pipeline.Workspace)"
                ls -laR $(Pipeline.Workspace)/aks
            displayName: 'Debug: AmirCheck downloaded manifests'
          
          - script: echo "Contents of YAML manifest:" && cat $(containerRegistry)/$(imageRepository):$(tag)
            displayName: 'Debug: Show YAML Content'

          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: 'aks'
              path: $(Pipeline.Workspace)
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/aks/shoppingapi.yaml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)

